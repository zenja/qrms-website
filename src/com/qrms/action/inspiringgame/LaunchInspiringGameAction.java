package com.qrms.action.inspiringgame;

import java.util.Date;

import com.opensymphony.xwork2.ActionSupport;
import com.qrms.bean.InspiringGameInfo;
import com.qrms.bean.QRContent;
import com.qrms.bean.User;
import com.qrms.service.IInspiringGameService;
import com.qrms.service.IQRContentService;
import com.qrms.service.IUserService;

/**
 * Description: This class is an Action.It is for user to launch inspiring game;
 * 
 * @author WangXing & ZhangZu
 * @version 1.0
 */
public class LaunchInspiringGameAction extends ActionSupport {

	private static final long serialVersionUID = 1L;

	/** service, to be injected */
	private IInspiringGameService inspiringGameService;

	/** service, to be injected */
	private IQRContentService qrContentService;

	/** service, to be injected */
	private IUserService userService;

	private InspiringGameInfo gameInfo;

	private Integer gameLauncherId;

	private String qrRawContent; // used to build an QRContent object to be
									// inserted into gameInfo

	private QRContent theQRContent; // generated by action itself, not passed by
									// user

	public IInspiringGameService getInspiringGameService() {
		return inspiringGameService;
	}

	public void setInspiringGameService(
			IInspiringGameService inspiringGameService) {
		this.inspiringGameService = inspiringGameService;
	}

	public IQRContentService getQrContentService() {
		return qrContentService;
	}

	public void setQrContentService(IQRContentService qrContentService) {
		this.qrContentService = qrContentService;
	}

	public IUserService getUserService() {
		return userService;
	}

	public void setUserService(IUserService userService) {
		this.userService = userService;
	}

	public InspiringGameInfo getGameInfo() {
		return gameInfo;
	}

	public void setGameInfo(InspiringGameInfo gameInfo) {
		this.gameInfo = gameInfo;
	}

	public String getQrRawContent() {
		return qrRawContent;
	}

	public void setQrRawContent(String qrRawContent) {
		this.qrRawContent = qrRawContent;
	}

	public QRContent getTheQRContent() {
		return theQRContent;
	}

	public void setTheQRContent(QRContent theQRContent) {
		this.theQRContent = theQRContent;
	}

	public Integer getGameLauncherId() {
		return gameLauncherId;
	}

	public void setGameLauncherId(Integer gameLauncherId) {
		this.gameLauncherId = gameLauncherId;
	}

	/**
	 * The method mainly saves the info of the game
	 * @return "noGameLauncher" if there is no gameLaucher 
	 * SUCCESS if all go right
	 * 
	 */
	public String launchGame() {
		// test info integration: gameLauncherId
		if (gameLauncherId == null) {
			return "noGameLauncher";
		}
		User gameLauncher = userService.findById(gameLauncherId);
		if (gameLauncher == null) {
			return "noGameLauncher";
		}

		// set game's info: user
		gameInfo.setUser(gameLauncher);

		// make QRContent object
		// at first, set the gameId to a dummy value(0),
		// for we dont't know the value of it until gameInfois saved to the
		// database
		theQRContent = qrContentService.makeQRContent(qrRawContent,
				IQRContentService.GAME_TYPE_INSPIRING_MARK, 0);

		// save the QRContent Object with the dummy gameId 0
		qrContentService.saveQRContent(theQRContent);

		// set game's info: placeDate
		gameInfo.setPlaceDate(new Date());

		// set game's info: qrContent
		gameInfo.setQrContent(theQRContent);

		// save the object(launch the game)
		inspiringGameService.launchGame(gameInfo);

		// now gameId is not dummy, set the gameId to theQRContent
		// and modify the database
		theQRContent.setGameId(gameInfo.getId());
		qrContentService.updateQRContent(theQRContent);

		return SUCCESS;
	}

}
